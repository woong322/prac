>>>>>>What is data?
>information


>>>>>What is a database (DB)?
>a place to store information
>a structured and organized set of data
>Databases (DB) support manipulation and storage of data etnries; DB make management of data significantly easier.

>>>>>>How is data structured in DBs?
>IN TABLES!!!!!!!!!!!!!!
>A table represents a type of "entity" we want to store (not a specific record)
	>>things like: users, cars, pokemon, etc
>A table has rows and columns
	>>>columns	= attributes AKA fields AKA properties
	>>>rows		= data entries AKA records
>EACH record in that table has an OFFICIAL unique identifier refferred to as a "primary key"


	|			Animal Table		       |
	________________________________________________________
	|AnimalPK | AnimalName |  AnimalSpecies | AnimalWeight |
	--------------------------------------------------------
	|  25        Max             Doggo             50      |
	|  37        Lucky           Horse             500     |
        |  112       Jack	     Spider            0.25    |
	|  400       Lucky           Horse             500     |
	________________________________________________________


>>>>>>>What is a DataBase Management System (DBMS)?
>The set of softwares which enable access to a database, allows manipulation of data, and reporting of data.
>It also processes queries
>There are a few types of DBMS:
	>>Relational	<-----WE'LL BE USING RELATIONAL
	>>Object Oriented
	>>Navigational
	>>etc



>>>>>>>>>>>What is SQL?
>Structured Query Language
>It's a syntax used to communicate with the database (DBMS)

Types of SQL languages:
-TransactSQL
-SQLServer
-SQLLite
-MySQL
-PostgreSQL
-Oracle SQL (aka PL/SQL)
-etc

>>>>>What....are the sublanguages of core SQL?
>DML-Data Manipulation Language
	>DML operates on records/data
	>These are CRUD methods: Create, Read, Update, Delete
	>DML needs to be commited, the other sublanguages generally don't
	>keywords: INSERT, SELECT, UPDATE, DELETE

>DDL-Data Definition Language
	>DDL operates on the schema
	>The "schema" refers to the DB's structure (aka its containers, like tables, views, etc)
	>keywords: CREATE, ALTER, TRUNCATE, DROP
		     (c)    (u)              (d)
>DQL-Data Query Language
	>Some DBs consider Select as its own sublanguage
	>keywords: SELECT
	>example query:
		SELECT column1 FROM tableA WHERE attr1=value

>DCL-Data Control Language
	>DCL controls WHO HAS ACCESS to the data
	>keywords: GRANT, REVOKE

>TCL-Transaction Control Language
	>TCL deals with creating "transaction" and persisting data
	>keywords: COMMIT, ROLLBACK, SAVEPOINT


>>>>What is a transaction?
>it's a commit; a change to the state of the database (or group of changes)
>example:
	insert (2records), delete (4 records), update (1record), commit

	how many transactions have occured?
	>1 transaction has occurred

>but what is rollback and savepoint?
>>example:
	
	originalState|----changes--------commit-----changes2-----rollback

	>the answer is: the rollback will delete changes back to the most RECENT commit
	    >originalState|----changes--------commit
	

	originalState|----changes-----savepoint mysave----changes2-------rollback mysave


	originalState|----changes-----savepoint mysave----changes2---commit----rollback mysave
	>>this won't work


What are the properties of a transaction?
>The ACID properties
>Atomicity
	>>"all or nothing"; no partial transactions
>Consistency
	>>after a transaction the state of your schema is intact
	>>also, the database should LOGICALLY be consistent
>Isolation
	>>transactions cannot interfere with one another
>Durability
	>>changes you make to the state of the DB persist through issues/errors




>>>>>>>>>>>>>>>>>>>>>MORE ON PRIMARY KEYS
>What is a primary key?
---the official unique identifier for the record

>>>Types of PKs:
>Natural Key:
	>it's a key that was obtained from outside of the database and is already unique
	>examples: emailaddress, SSN, VIN, licenseplate, etc
	>issues?
		>>>what happens if we can't guarantee the key's uniqueness
			(in real life mistakes have been made)
		>>>what happens if the natural key is changed in the outside world
			(people can apply to change their SSN)
		>>>what happens if the natural key is sensitive information? like a SSN

>Surrogate Key:
	>it's a key that was created inside this dataabase and to be used inside this database
	>issues?
		>>>takes up mre space than necessary if you COULD have been using the natural key

>Composite Key:
	>two ore more fields/column that create a unique value and acts as the PK
	>example:
		song title: "love song"
		artist: "Trevin and the wailers"
		compositive key: ("Trevin and the wailers", "love song remix feat Nasim")




>>>>>REFERNTIAL INTEGRITY>>>>>>>>>>>>>>>>
>What is referential integrity?
	>the enforcement of foreign keys referencing valid and existing primary keys
	>essentially, referential integrity protects us from having orphan

>What is an orphan record?
	>because a FK reference a PK, the FK is DEPENDENT upon the PK of the other record....
		>>mean the PK record is a parent record to the FK record (aka the child record)
	>SO....if you delete the Parent record then the child record (FK) will no longer have
		a parent, it will be an orphan record. REFERENTIAL INTEGRITY protects us from
		accidentally creating orphans records. If you attempt a transaction that will
		create an orphan record then it will throw an error.
	>To delete the parent record, you must first delete the children records
		(also, you can look into "cascade on delete" OR
		you could set the child's FK to null temporarily)


>>>>>>>>>>>>>MULTIPLICITY>>>>>>>>>>>>
>What is multiplicity?
>>>multiplicity describes the relationship between tables/entities

>MANY-TO-MANY
	>classes to student
	>fridges to healthinspectors (project 0 reference)

>ONE-TO-MANY
	>revatureTrainer to associates
	>school to students

>MANY-TO-ONE
	>associates to revatureTrainer
	>students to school

>ONE-TO-ONE
	>mandalorian to babyYoda
	>student to studentID
	>SSN to person
	(one-to-one is a deprecated multiplicity, there isn't a common scenario where you'd 		normally use this)

LET'S SEE HOW TO IMPLEMENT MULTIPLICITY IN A DATABASE!!!



>>>>>>>>>>>>>>JOINS>>>>>>>>>>>>>>>>>>>>>>>
>What is a join?
>>>its a way to combine tables into a single result set based on some attribute (like a FK)

>how does a join's result look?

	| A		|		|	B		|
	| attr1   attr2 |		|  attr3   attr4  attr5 |



	|		A join B		|
	| attr 1  attr2   attr3   attr4   attr5 |



>>>Types of joins?

Inner Join
Outer Join
	>Left
	>Right
	>Full
Self Join
	(when a table joins with itself)
	(example: employee joins employee      ON EPK=reports_to)
	(example: person join person            ON PPK=spouse_id)
Cross Join
	(table 100 records cross join table 100,000....result set? 10 million)
	(example: shirt sizes table  cross join  shirt graphics table)
Cartesian Join
	(aka Cross Join)
Theta Join
	(thetas joins are when we use inequalities like >, <, etc)
	(example: empkoyee joins otherTable  ON EPK > reports_to)
Equi Join
	(equijoins are when we use equalities "=")
	(example: employee joins otherTable  ON EPK=reports_to)
Natural Join
N-Way Join
etc





-----------This part is not on the curriculum BUT it is still fair game for QC and interviews-------


>>>>>>>>>>SET OPERATORS>>>>>>>>>>>>>>>
>set operators combine results sets into a single NEW result set

>Union
	>takes all the data entries in both result sets and puts them into a NEW result set
		no duplicates

>Union All
	>takes all the data entries in both result sets and puts them into a NEW result set
		yes, duplicates

>Intersect
	>takes all the data entries that happen to appear in BOTH result sets and puts them
		into a NEW result set

>Minus
	>takes all the data entries from the left result set and substracts any data entries
		that happen to appear in the right table


>EXAMPLE SYNTAX
	SELECT * FROM tableA WHERE attr1='stuff' AND attr3=10;
	UNION ALL
	SELECT * FROM tableB WHERE attr2=5;

(requirements for set operators: each result set must have the same number of columns
	AND each column must have the same datatypes. The names of the columns don't matter, they
	don't have to match)


		(employee)			(manager)
		|	A	|		|    B          |
		|attr1    attr2 |		|  attr3  attr 4|
		| 0       Island|		|   0     Island|
		| 1       Forest|		|   2     Plains|
		| 3       Swamp |


What does MINUS look like?
		|A MINUS  B  |
		|attr1  attr2|
		| 1    Forest|
		| 3     Swamp|

		|B MINUS  A  |
		|attr3  attr4|
		| 2    Plains|

What does INTERSECT look like?
		|A INTERSECT B|
		|attr1  attr2|
		| 0    Island|

What does UNION ALL look like?
		|A UNIONALL B|
		|attr1  attr2|
		| 0    Island|
		| 0    Island|
		| 1    Forest|
		| 2    Plains|
		| 3     Swamp|


What does UNION look like?
		|A UNION  B  |
		|attr1  attr2|
		| 0    Island|
		| 1    Forest|
		| 2    Plains|
		| 3     Swamp|



----------------------TANGENT THAT MAY HELP WITH PROJECT 0 & 1------------------
>>>What is an ENUM? (enumeration)
>an entity that appears in programming, that can restrict the value a variable can have


>>let's look at some code WITHOUT enums:

int myState = ....system entered data.......

if(myState ==0){
	//logic for OFF
}else if(myState == 1){
	//logic for IDLE
}else if(myState == 2){
	//logic for ACCELERATING
}else if(myState == 3){
	//logic for COASTING
}else if(myState == 4){
	//logic for STOPPING
}


>>let's look at some code WITH enums:

public enum CarState{ OFF=0, IDLE=1, ACCELERATION=2, COASTING=3, STOPPING=4 }

CarState myState = ....system entered data.......
if(myState == CarState.OFF){
	//logic for OFF
}else if(myState == CarState.IDLE){
	//logic for IDLE
}else if(myState == CarState.ACCELERATION){
	//logic for ACCELERATING
}else if(myState == CarState.COASTING){
	//logic for COASTING
}else if(myState == CarState.STOPPING){
	//logic for STOPPING
}



>>>>IN SQL we don't have enums readily available ...we use LOOKUP TABLES to acheive this restriction
>>>>  of values for a field/attribute


|    Users Table   	|
| UserID  Name   RoleFK |
|   0    Zach	  0	|
|  1     Jacob    1	|


| Role Table		|		<-------this table would be used as a lookup table
| RoleID      Name	|
|  0          Admin	|
|  1	    Employee	|
|  2       Customer	|


| Status Table		|	<-----again, we have another lookup table
| StatusID	Name	|
|   0	      Pending	|
|   1	     Approved	|
|   2	     Denied	|


*lookup tables help restrict range of values
*also, they help modularize your data entries to prevent update anomalies
*also, makes it easier to update statuses
-------------------------------------

|    Users Table   	| <----imagine not using a lookup table for a second
| UserID  Name   RoleName(varchar)|
|   0    Zach	  admin		|
|  1     Jacob    supersaiyan	|








