>>>>Download tomcat
> https://tomcat.apache.org/download-90.cgi
> download specifically the ***Binary Districutions CORE (zip or tar file)*** and the ***Source Code Distributions (zip or tar files)***
>extract the CORE, not the source code

>>>>Integrating Tomcat with our workspace (do this for EVERY workspace, not every project)
	window -> preferences -> server -> runtime environments -> add
	*search for tomcat version 9 because that's teh version we downloaded)*
	*click next*
	*click broswer*
	*now navigate to bomcat CORE folder, NOT THE SRC FOLDER*
	*select, then apply and close*

>>>FOR A MAC
	Spring Tools Suite -> preferences.....

(perform the following three steps EVERY war project, not JUST every workspace)

>>>>>>NOW, after we've created a WAR project, let's create a web.xml to git rid of that red X
	right click project -> java EE tools -> click "generate deployment descriptor stub"

>>>>>>Let's also add tomcat to the project's buildpath so we can use tomcat classes/interfaces/etc
	right click project ->click properties -> targeted runtimes
	*check the apache tomcat box*
	*apply and close*

>>>>>Also consider right clicking your tomcat in the servers window -> add and remove ->
	click your project



------------------------------------------------------------
What is the internet?
   it's basically a series of client-server interactions
   it's a giant messaging system

What is a URL?
   -stands for Uniform Resource Locator
   -the URL has information to locate the computer where the requested
	resource is located AND it has information for WHAT resource
	you're looking for
   -consists of protocol + ip address/domain + port +URI

What is a protocol?
  -the rules for web communication
  -we overwhelmingly use HTTP or HTTPS when surfing the web
  -HTTP stand for Hyper Text Transfer Protocol
  -Btw, there are many other types of protocol: ftp, smtp, etc

what is the domain (or ip address)?
  -the directions/address to the computer that has your resource

what is the port?
  -this is the specific channel that the server is listening to
  -each computer has somewhere around 65,000 ports and only one application
    can listen on a single port at a time.
  -so AFTER you use the ip address to find a computer, you need to find out
    WHICH port on that computer your target server is listening to

what is the URI (aka path)?
  -the URI stands for Uniform Resource Identifier
  -is the information that specifies WHICH resource your'e requesting from
    the server. Because ethe server could have hundreds or thousands of resources


----
NOW, let's talk about HTTP/HTTPS in a bit more detail since that is the protocol
	we'll be using the most

Let's start with the HTTP Messaging System

HTTP Request
   Header -contains metadata
	Common Headers include:
	-http verb/method
	-URL
	-content type
	-content length
	-http version
   Body -contains target resource (dataformat: HTML, JSON, XML, text, etc)


HTTP Response
   Header -contains metadata
	Common Headers include:
	-status code
	-content type
	-content length
	-http version
   Body -contains target resource (dataformat: HTML, JSON, XML, text, etc)

>>>Status Code-
	contains information on how successful the client's request was.

	Status Code Ranges:
	100s- Informational
	200s- Success
		examples:
		200 - OK
	300s- Redirection
	400s- Client Error
		examples:
		400- bad request
		403- forbidden
		404- not found
		405- method not allowed
		410- gone
		418- I'm a teapot
	500s-  Server Error


>>>Http Methods

>Types of Http methods
	>GET - retrieve a resource	(browser default)
	>POST - creates a resource (can be versatile)
	>PUT - updates a resource (replaces resources with a new resource)
	>DELETE -removes a resource
	>PATCH - partially update a resource
	>HEAD - operates like a GET method, but only returns the header information
	>OPTIONS - sends information on what functionality is available
	---there are more
	>TRACE
	>COPY
	etc

These Http Methods are conventions

-------
>>>>>GET vs POST

	GET
	>GET transfers data using the URL (it displays the data out in the open)
	>GET can be bookmarked, allowing people to save (or send to friends) query parameters
	>because GET uses the URL there is a size limit to a GET, because there is a size limit
		to a URL
	>don't say "get doesn't have a body" if someone asks, because it does
		>>instead say soemthing like "get usually doesn't have contents in its body"

	POST
	>POST transfer data using the body (it hides the data)
	>is more secure, because data like passwords aren't right in the URL
	>theorectically limitless data in the body


--------------
>>What is a JSON?
>Stands for: JavaScript Object Notation
>JSON is a standardized dataformat that is VERY similar to an Object Literal in JavaScript
>A JSON is NOT a JavaScript object, it is simply a string that represents an object


>>>Detour: Object Literals
	In Java:
		int i=5; //THIS IS AN INTEGER LITERAL
		double d= 5.0; //THIS IS A DOUBLE LITERAL
		String s= "Hello"; //THIS IS A STRING LITERAL
	In JavaScript:
		var myObj = {
			"attribute1": 5,
			'attr2': "hello",
			attr3: {
				"subattr1": "hola",
				"subattr2": 50
			     },
			"attr4": [4, 88, 12]
		}

>>>rules of JSON
>	{ } <---denotes an object
>	[ ] <---denotes an array
>In short, a JSON is a list of key-value pairs. Variable names, and variable values.
>each attribute/variable name MUST BE SURROUNDED WITH DOUBLE QUOTES
>a ":" separates the variable name and the variable value
>variables are separated by commas
>variable values CAN BE objects or arrays themselves
	>>what this means is that you can have subobject inside of your JSON

>>>Now let's look at a JSON,  FIRST example:
{
	"attr1": 5,
	"attr2": "hello",
	"attr3": {
		"subattr1": "hola",
		"subattr2": 50
	},
	"attr4": [4, 88, 12],
	"attr5": [{"arryattr1": 5},{"arryattr1": "hola", "arryattr2": "additional"},{"arryattr1": "que pasa?"}]
}
>>>LET'S TAKE THAT SAME JSON AND TURN IT INTO AN XML

<xml>
	<attr1>5</attr1>
	<attr2>hello</attr2>
	<attr3>
		<subattr1>hola</subattr1>
		<subattr2>50</subattr2>
	</attr3>
	<attr4>
		<list>4</list>
		<list>88</list>
		<list>12</list>
	</attr4>
	<attr5>
		<list>
			<arryattr1>5</arryattr1>
		</list>
		<list>
			<arryattr1>hola</arryattr1>
			<arryattr2>additional</arryattr2>
		</list>
		<list>
			<arryattr1>que pasa?</arryattr1>
		</list>
	</attr5>
</xml>

>>>Now let's look at a JSON,  SECOND example:
[
	50,
	75,
	"hello",
	{"arryattr1": 5}
]


-----------------------------------------------------------------------------------

>>>>>>>>What is a server?
>Is a computer that is running server software

>>What is server software?
>software that is used to receive web requests and send web responses
>In our case, our server software is....TOMCAT!!!!

>>What is a Servlet?
>A servlet is a java class that is tasked with handling a single URI inside of your server

>>What is the servlet heirarchy?

	(Servlet, interface)
		|	init(), service(), destroy(),
		|	getServletConfig(), getServletInfo()
		|
	(GenericServlet, abstract class)
		|	implements init(), destroy()
		|	implements getServletConfig(), getServletInfo()
		|	creates new method getServletContext()
		|
	(HttpServlet, abstract class)
		|	implements service()
		|
		|
	(OurCustomServlet, class)



additonally, we have:

(HttpServletRequest, interface)
(HttpServletResponse, interface)


>>>What is the servlet lifecyle?
	init()
		creates and initializes the servlet object
		will be run a single time in the lifecyle
		will be run WHEN the server starts up OR when the first request happens
			(there is a way to configure this)
	service()
		the servlet will SERVICE the Http Request
		(that is to say, it will perform logic for the Http Request)
		will be run the same amount of times that we have Http Request
		(that is to say, it will be run MANY times)
		will be run WHEN we have an Http Request
	destroy()
		destroys the servlet object
		will be run a single time in the lifecyle
		will be run WHEN the server shutsdown
			(or if there is some fatal error with the servlet)



